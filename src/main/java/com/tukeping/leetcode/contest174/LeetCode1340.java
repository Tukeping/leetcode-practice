package com.tukeping.leetcode.contest174;

import org.junit.Test;

import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.atomic.AtomicInteger;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

/**
 * @author tukeping
 * @date 2020/4/10
 **/
public class LeetCode1340 {

    /** time: O(n + n log n + n * d) => O(n*d), space: O(n) **/
    public int maxJumps2(int[] a, int d) {
        int n = a.length;
        final AtomicInteger cnt = new AtomicInteger(0);

        int[][] ai = new int[n][];
        for (int i = 0; i < n; i++) {
            ai[i] = new int[]{a[i], i};
            cnt.incrementAndGet();
        }

        Arrays.sort(ai, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                cnt.incrementAndGet();
                return a[0] - b[0];
            }
        });

        int[] dp = new int[n];
        int ret = 0;

        for (int i = 0; i < n; i++) {
            int ind = ai[i][1];
            int max = 0;
            for (int j = ind - 1; j >= 0 && j >= ind - d; j--) {
                cnt.incrementAndGet();
                if (a[j] < a[ind]) {
                    max = Math.max(max, dp[j]);
                } else {
                    break;
                }
            }
            for (int j = ind + 1; j < n && j <= ind + d; j++) {
                cnt.incrementAndGet();
                if (a[j] < a[ind]) {
                    max = Math.max(max, dp[j]);
                } else {
                    break;
                }
            }
            dp[ind] = max + 1;
            ret = Math.max(ret, dp[ind]);
            cnt.incrementAndGet();
        }
        System.out.println(cnt.get());
        return ret;
    }

    /** time: O(n^2 * d) space: O(n) **/
    public int maxJumps(int[] arr, int d) {
        int len = arr.length;
        if (len == 1) return 1;

        int max = 1;
        int[] dp = new int[len];
        Queue<Integer> Q = new LinkedList<>();

//        int cnt = 0;
        for (int choose = 0; choose <= len - 1; choose++) {
            Q.add(choose);
            Arrays.fill(dp, 0);
            dp[choose] = 1;
            while (!Q.isEmpty()) {
                int i = Q.poll();
                int iStep = arr[i];
                int kMax = Integer.MIN_VALUE;
                for (int k = i - 1; k >= 0 && k >= i - d; k--) {
                    int jStep = arr[k];
                    kMax = Math.max(kMax, jStep);
                    // min(i, j) < k < max(i, j) && arr[i] > arr[j] && abs(i-j) <= d
                    if (kMax > iStep)
                        break;
                    if (iStep > jStep && kMax <= jStep) {
                        dp[k] = dp[i] + 1;
                        max = Math.max(dp[k], max);
                        Q.add(k);
                    }
//                    cnt++;
                }
                kMax = Integer.MIN_VALUE;
                for (int k = i + 1; k <= len - 1 && k <= i + d; k++) {
                    int jStep = arr[k];
                    kMax = Math.max(kMax, jStep);
                    // min(i, j) < k < max(i, j) && arr[i] > arr[j] && abs(i-j) <= d
                    if (kMax > iStep)
                        break;
                    if (iStep > jStep && kMax <= jStep) {
                        dp[k] = dp[i] + 1;
                        max = Math.max(dp[k], max);
                        Q.add(k);
                    }
//                    cnt++;
                }
//                cnt++;
            }
        }
//        System.out.println(cnt);
        return max;
    }

    /**
     * 输入：arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
     * 输出：4
     * 解释：你可以从下标 10 出发，然后如上图依次经过 10 --> 8 --> 6 --> 7 。
     * 注意，如果你从下标 6 开始，你只能跳到下标 7 处。你不能跳到下标 5 处因为 13 > 9 。你也不能跳到下标 4 处，因为下标 5 在下标 4 和 6 之间且 13 > 9 。
     * 类似的，你不能从下标 3 处跳到下标 2 或者下标 1 处。
     */
    @Test
    public void test1() {
        int n = maxJumps(new int[]{6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12}, 2);
        assertThat(n, is(4));
    }

    /**
     * 输入：arr = [3,3,3,3,3], d = 3
     * 输出：1
     * 解释：你可以从任意下标处开始且你永远无法跳到任何其他坐标。
     */
    @Test
    public void test2() {
        int n = maxJumps(new int[]{3, 3, 3, 3, 3}, 3);
        assertThat(n, is(1));
    }

    /**
     * 输入：arr = [7,6,5,4,3,2,1], d = 1
     * 输出：7
     * 解释：从下标 0 处开始，你可以按照数值从大到小，访问所有的下标。
     */
    @Test
    public void test3() {
        int n = maxJumps(new int[]{7, 6, 5, 4, 3, 2, 1}, 1);
        assertThat(n, is(7));
    }

    /**
     * 输入：arr = [7,1,7,1,7,1], d = 2
     * 输出：2
     */
    @Test
    public void test4() {
        int n = maxJumps(new int[]{7, 1, 7, 1, 7, 1}, 2);
        assertThat(n, is(2));
    }

    /**
     * 输入：arr = [66], d = 1
     * 输出：1
     */
    @Test
    public void test5() {
        int n = maxJumps(new int[]{66}, 1);
        assertThat(n, is(1));
    }

    @Test
    public void test6() {
        int n = maxJumps(new int[]{81, 46, 64, 8, 4, 25, 26, 15, 24, 9, 94, 77, 5, 51, 68, 51, 61, 84, 37, 64, 61, 12, 77, 8, 63, 3, 35, 37, 14, 53, 58, 81, 47, 6, 8, 90, 20, 51, 51, 38, 54, 13, 38, 26, 42, 24, 59, 7, 43, 68, 57, 23, 38, 78, 50, 81, 31, 83, 32, 67, 54, 41, 89, 97, 30, 59, 90, 72, 18, 37, 26, 77, 49, 50, 14, 70, 68, 53, 92, 75, 80, 72, 55, 40, 14, 50, 28, 60, 15, 15, 39, 58, 75, 61, 77, 73, 99, 15, 38, 71, 40, 13, 54, 99, 26, 49, 21, 62, 91, 4, 18, 78, 65, 78, 79, 17, 90, 16, 2, 25, 92, 7, 26, 51, 69, 3, 16, 64, 95, 61, 74, 61, 61, 2, 20, 92, 78, 66, 2, 63, 34, 85, 42, 52, 8, 41, 46, 43, 73, 14, 97, 11, 2, 91, 37, 20, 51, 84, 86, 90, 92, 53, 23, 21, 71, 13, 58, 88, 53, 36, 10, 33, 47, 80, 97, 66, 49, 30, 70, 34, 33, 55, 86, 67, 56, 4, 46, 2, 80, 61, 82, 56, 41, 46, 70, 48, 2, 69, 72, 41, 10, 11, 9, 23, 31, 88, 75, 44, 47, 8, 77, 64, 33, 24, 84, 29, 96, 34, 32, 10, 27, 9, 81, 52, 58, 41, 31, 67, 36, 45, 10, 93, 77, 90, 3, 60, 58, 97, 4, 74, 59, 74, 42, 91, 94, 66, 20, 14, 9, 77, 16, 83, 6, 21, 38, 28, 78, 63, 87, 36, 17, 18, 57, 57, 69, 84, 95, 95, 99, 32, 63, 91, 86, 54, 38, 83, 15, 42, 97, 77, 15, 7, 59, 8, 37, 52, 13, 86, 97, 40, 20, 51, 46, 52, 76, 42, 7, 66, 47, 53, 9, 48, 86, 72, 17, 60, 19, 57, 87, 70, 78, 21, 32, 15, 79, 28, 78, 55, 73, 79, 22, 42, 12, 75, 84, 47, 97, 22, 33, 61, 89, 100, 76, 33, 39, 61, 74, 51, 98, 51, 95, 17, 31, 8, 28, 43, 85, 58, 60, 24, 10, 29, 52, 22, 98, 34, 62, 7, 40, 77, 69, 2, 51, 68, 84, 33, 28, 54, 86, 34, 93, 30, 28, 86, 72, 10, 36, 25, 43, 88, 88, 59, 98, 13, 18, 28, 82, 1, 41, 30, 52, 20, 97, 82, 84, 44, 27, 98, 21, 98, 74, 50, 95, 47, 89, 8, 84, 50, 21, 81, 74, 71, 76, 16, 37, 75, 1, 34, 35, 41, 3, 74, 55, 79, 56, 57, 77, 17, 99, 39, 77, 1, 51, 83, 40, 77, 9, 82, 4, 36, 90, 35, 41, 98, 85, 28, 49, 83, 16, 80, 98, 40, 97, 36, 83, 11, 99, 51, 79, 36, 73, 46, 92, 18, 8, 84, 12, 8, 83, 90, 90, 59, 88, 70, 26, 33, 34, 39, 95, 9, 99, 38, 8, 31, 53, 51, 64, 80, 25, 6, 26, 82, 57, 37, 35, 71, 3, 7, 25, 10, 8, 71, 2, 86, 88, 21, 79, 14, 95, 17, 58, 89, 47, 16, 25, 88, 13, 15, 5, 73, 71, 29, 51, 14, 54, 14, 11, 53, 79, 75, 2, 92, 1, 87, 5, 63, 93, 23, 59, 12, 1, 66, 30, 53, 27, 40, 42, 84, 9, 40, 99, 6, 30, 62, 66, 32, 65, 25, 34, 17, 39, 23, 42, 66, 93, 82, 53, 40, 88, 49, 32, 77, 20, 21, 95, 78, 100, 29, 15, 43, 75, 16, 67, 56, 7, 95, 4, 41, 1, 29, 22, 68, 86, 43, 37, 91, 89, 66, 24, 18, 73, 59, 87, 8, 44, 86, 42, 50, 93, 85, 69, 30, 71, 37, 64, 46, 99, 16, 36, 4, 97, 73, 65, 22, 65, 84, 2, 96, 81, 72, 18, 44, 3, 65, 7, 66, 56, 17, 100, 67, 50, 92, 55, 99, 68, 11, 25, 71, 5, 1, 26, 87, 4, 69, 77, 78, 17, 89, 10, 29, 15, 69, 37, 89, 51, 68, 68, 61, 33, 22, 15, 3}, 603);
        assertThat(n, is(15));
    }

    @Test
    public void test7() {
        int n = maxJumps(new int[]{37449, 50826, 48629, 53457, 86176, 97983, 30514, 627, 4435, 2060, 29389, 61805, 81013, 77709, 53595, 70058, 5069, 64876, 16877, 86462, 29078, 40015, 33538, 76245, 89300, 82728, 787, 44496, 10595, 94004, 22033, 42312, 49798, 21686, 91232, 8272, 63958, 11193, 18547, 35163, 29483, 173, 71856, 39955, 20475, 85083, 71039, 98042, 59518, 61701, 72475, 17365, 58597, 82973, 85426, 62948, 55685, 17682, 50585, 96607, 9603, 18759, 62694, 59375, 7470, 75354, 32727, 93664, 73526, 70046, 21251, 58173, 61504, 8378, 33884, 39283, 8689, 84885, 92640, 10654, 32983, 2254, 52601, 52419, 20809, 21623, 63763, 34479, 69429, 18146, 83143, 96564, 17384, 98971, 12456, 81585, 31227, 22088, 67361, 26411, 94406, 78798, 45898, 31617, 9400, 40398, 15790, 36242, 32237, 84431, 39759, 69209, 36354, 25113, 77450, 10245, 58021, 99122, 52202, 35290, 91451, 84688, 97832, 95735, 21995, 89952, 25394, 51514, 82576, 16896, 38207, 43068, 56094, 35040, 2018, 67432, 56389, 55014, 76849, 69765, 39357, 31498, 91292, 51610, 27699, 50415, 83988, 70298, 65469, 30195, 11643, 82188, 36491, 89890, 14208, 22437, 91121, 2352, 22067, 33340, 4728, 11845, 70960, 2658, 60952, 98606, 34672, 88947, 71973, 23022, 13549, 71255, 11015, 99973, 52568, 5279, 56706, 26863, 1202, 1489, 6356, 90219, 12738, 5483, 38469, 91151, 61572, 3063, 16464, 65999, 16224, 49143, 61152, 38076, 53195, 87479, 24751, 77976, 15029, 44456, 28904, 67360, 72300, 93089, 87011, 19183, 43587, 39795, 18713, 95684, 92147, 19682, 803, 47293, 34627, 55103, 41807, 62202, 54888, 85754, 30623, 35768, 59940, 98546, 57429, 6523, 33555, 26230, 72172, 33994, 31347, 1609, 80247, 89388, 37009, 15703, 23013, 75390, 34112, 51860, 64600, 64667, 81081, 74253, 59074, 2701, 48244, 42148, 56882, 22527, 82185, 15911, 49344, 3471, 77848, 20316, 32402, 13019, 41956, 95396, 42981, 16807, 73148, 40632, 86040, 20419, 48314, 39262, 72237, 74545, 25935, 67363, 51557, 10146, 98653, 2230, 38975, 96955, 10529, 11005, 30399, 96496, 26839, 16194, 13144, 56444, 10674, 79233, 86663, 15913, 74886, 44431, 94163, 32735, 85938, 62949, 78762, 77235, 41341, 94316, 44306, 18218, 82013, 8362, 53230, 17999, 29721, 61252, 54937, 23496, 84264, 90326, 58320, 84225, 30953, 40659, 83774, 19586, 86885, 59322, 93483, 51776, 5564, 33257, 88923, 50295, 70592, 80526, 24336, 47628, 83882, 98169, 88703, 106, 66220, 45006, 58509, 81141, 94412, 66118, 56382, 48337, 72129, 13006, 77211, 15314, 37452, 50376, 87922, 16398, 80299, 72092, 58636, 20458, 89500, 19648, 74595, 24538, 1668, 89159, 19896, 39735, 42861, 27710, 55931, 31530, 31413, 35700, 91816, 52665, 99708, 86372, 23211, 46788, 5519, 13337, 93757, 36790, 47676, 3241, 62023, 14553, 61904, 23788, 16192, 48944, 57217, 348, 55490, 56590, 19429, 57804, 73245, 24216, 64336, 91729, 33902, 83639, 66672, 68688, 75613, 59632, 31297, 4600, 87655, 82579, 72056, 49072, 73013, 15651, 30881, 50431, 478, 28773, 95946, 88079, 86656, 12603, 78007, 81698, 41759, 13689, 61100, 8862, 34022, 13896, 5440, 72136, 22702, 30383, 83519, 32176, 31262, 54792, 6724, 8020, 78067, 14443, 47181, 4066, 85515, 38245, 53818, 9098, 93970, 45048, 95608, 15273, 90554, 70413, 13297, 95552, 63566, 49880, 84064, 61365, 96238, 87622, 75755, 30931, 29077, 39539, 51470, 36387, 43578, 97550, 96289, 74465, 67023, 96735, 32580, 1070, 26819, 85655, 65675, 22521, 46583, 58297, 36805, 60090, 70400, 79517, 42405, 39319, 21826, 10637, 2741, 59523, 47521, 79607, 4108, 73738, 83182, 64704, 9522, 19409, 9665, 33930, 72285, 71414, 1337, 13709, 69633, 28858, 28531, 61419, 32597, 71155, 36837, 35194, 71706, 96628, 92304, 93771, 80016, 43088, 79217, 15158, 54800, 91113, 83692, 71282, 14448, 94720, 39445, 24452, 68626, 703, 48679, 92539, 61503, 89226, 12358, 84643, 43684, 71258, 37233, 38282, 27089, 31387, 57812, 4861, 14923, 52580, 55479, 54656, 26534, 90430, 74987, 86232, 18711, 72811, 48240, 62705, 21011, 37945, 24035, 82796, 71739, 67807, 94030, 54749, 95023, 62118, 31340, 67596, 52267, 74468, 20289, 52988, 85468, 22678, 10369, 8575, 88620, 2280, 90774, 9937, 46214, 29669, 87768, 23679, 33684, 1364, 40796, 29850, 81238, 5718, 83561, 96586, 68151, 1731, 14431, 91326, 96789, 91893, 51419, 19949, 68360, 82859, 75303, 22351, 93268, 26816, 52724, 75794, 15175, 3024, 69546, 16836, 92676, 25457, 24176, 66897, 93801, 87130, 78646, 2110, 80905, 49714, 12487, 56422, 92883, 1796, 96810, 28584, 27688, 24114, 11884, 7949, 37770, 20658, 90547, 89481, 21231, 14164, 41474, 98077, 47303, 86161, 89992, 6256, 98964, 45778, 93057, 50081, 79025, 2067, 33701, 87505, 86300, 61209, 78660, 76381, 84377, 14182, 41855, 17622, 68347, 66496, 79083, 28786, 38737, 36173, 42653, 75924, 17356, 90963, 45594, 38441, 51175, 89862, 4969, 38974, 79088, 20481}, 349);
        assertThat(n, is(23));
    }
}
